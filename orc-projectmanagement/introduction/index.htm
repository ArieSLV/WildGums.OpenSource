<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Introduction - WildGums open source center</title>
    <link rel="shortcut icon" href="../../favicon.ico">
    <link rel="stylesheet" href="../../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../../css/styles/vs.css">
    <link rel="stylesheet" href="../../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="/index.htm"><i class="fa fa-home"></i> WildGums open source center</a>
                <div role="search">
                    <form id="search-form" class="form" action="../../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../../home.htm">Home</a>
</li>
<li class="tocentry"><a href="../../introduction/">Introduction</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orchestra/">Orchestra</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-analytics/">Orc.Analytics</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-automaticsupport/">Orc.AutomaticSupport</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-commandline/">Orc.CommandLine</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-controls/">Orc.Controls</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-csvhelper/">Orc.CsvHelper</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-csvtexteditor/">Orc.CsvTextEditor</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-dbtocsv/">Orc.DbToCsv</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-dependencygraph/">Orc.DependencyGraph</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-dynamicobjects/">Orc.DynamicObjects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-entityframework/">Orc.EntityFramework</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-extensibility/">Orc.Extensibility</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-feedback/">Orc.Feedback</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-fileassociation/">Orc.FileAssociation</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-filesystem/">Orc.FileSystem</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-filterbuilder/">Orc.FilterBuilder</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-fluentvalidation/">Orc.FluentValidation</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-licensemanager/">Orc.LicenseManager</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-logviewer/">Orc.LogViewer</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-memento/">Orc.Memento</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-metadata/">Orc.Metadata</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-notifications/">Orc.Notifications</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-nugetexplorer/">Orc.NuGetExplorer</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-prism/">Orc.Prism</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../../orc-projectmanagement/">Orc.ProjectManagement</a></span></li>
<li class="tocentry current"><a class="current" href="../../orc-projectmanagement/introduction/">Introduction</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#creating-a-project-refresher-selector">Creating a project refresher selector</a></li>

<li class="tocentry"><a href="#creating-a-project-refresher">Creating a project refresher</a></li>



</ul>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-scheduling/">Orc.Scheduling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-search/">Orc.Search</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-skia/">Orc.Skia</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-snapshots/">Orc.Snapshots</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-sort/">Orc.Sort</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-squirrel/">Orc.Squirrel</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-supportpackage/">Orc.SupportPackage</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-systeminfo/">Orc.SystemInfo</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-wizard/">Orc.Wizard</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../../orc-workspacemanagement/">Orc.WorkspaceManagement</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../../index.htm">WildGums open source center</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../../home.htm">Home</a></li> / <li><a href="../../orc-projectmanagement/index.htm">Orc.ProjectManagement</a></li> / <li><a href="../../orc-projectmanagement/introduction/index.htm">Introduction</a></li></ul>

                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="orc.projectmanagement">Orc.ProjectManagement<a class="headerlink" href="#orc.projectmanagement" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Name</th>
	<th>Badge</th>
</tr>
</thead>
<tbody>
<tr>
	<td>Chat</td>
	<td><a href="https://gitter.im/WildGums/Orc.ProjectManagement?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/WildGums/Orc.ProjectManagement" /></a></td>
</tr>
<tr>
	<td>Downloads</td>
	<td><img src="https://img.shields.io/nuget/dt/orc.projectmanagement.svg" alt="NuGet downloads" /></td>
</tr>
<tr>
	<td>Stable version</td>
	<td><img src="https://img.shields.io/nuget/v/orc.projectmanagement.svg" alt="Version" /></td>
</tr>
<tr>
	<td>Unstable version</td>
	<td><img src="https://img.shields.io/nuget/vpre/orc.projectmanagement.svg" alt="Pre-release version" /></td>
</tr>
</tbody>
</table>
<p>Find the source at <a href="https://github.com/WildGums/Orc.ProjectManagement" target="_blank">https://github.com/WildGums/Orc.ProjectManagement</a></p>
<p>Manage projects the easy way using this library.</p>
<h1 id="quick-introduction">Quick introduction<a class="headerlink" href="#quick-introduction" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>The project management library makes it easy to manage projects. The main component is the <em>IProjectManager</em> that contains the current project and allows to load or save a project. Note that this library does not force you to use a specific project location of any sort, so it can even be a database or server call to read / write the project. </p>
<p>Below is an overview of the most important components:</p>
<ul>
<li><strong>IProject</strong> =&gt; the actual project object</li>
<li><strong>IProjectManager</strong> =&gt; the project manager with events and management methods</li>
<li><strong>IProjectInitializer</strong> =&gt; allows customization of initial settings of a project</li>
<li><strong>IProjectReader</strong> =&gt; reads a project from a location</li>
<li><strong>IProjectWriter</strong> =&gt; writes a project to a location</li>
</ul>
<h1 id="creating-a-project">Creating a project<a class="headerlink" href="#creating-a-project" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>A project is a model that can be implemented by the developer and must implement the <em>IProject</em> interface. The most convenient way to implement a project is by deriving from the <em>ProjectBase</em> class:</p>
<pre><code>public class MyProject : ProjectBase
{
    public Project(string title)
        : base(title)
    {
    }

    public string FirstName { get; private set; }

    public string LastName { get; private set; }
}
</code></pre>

<h1 id="creating-a-project-initializer">Creating a project initializer<a class="headerlink" href="#creating-a-project-initializer" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>When a project manager is created, it doesn't contain anything. The <em>IProjectInitializer</em> interface allows the customization of that state. </p>
<p>By default the following initializers are available:</p>
<ul>
<li><strong>EmptyProjectInitializer</strong> =&gt; initializes nothing, this is the default</li>
<li><strong>DirectoryProjectInitializer</strong> =&gt; First checks if there is an app config setting called <em>DataLocation</em>. If so, it will use that. If not, it will fall back to <em>%AppData%\[assembly company]\[assembly product]\data</em>. Then it will also check if a command line directory is passed (first argument). If so, all previous will be overriden by the command line directory.</li>
<li><strong>FileProjectInitializer</strong> =&gt; This will check if a command line file is passed (first argument). If so, it will be used as initial project. Otherwise no project will be loaded.</li>
</ul>
<p>To create a custom project initializer, see the example below:</p>
<p>Next it can be registered in the ServiceLocator (so it will automatically be injected into the <em>ProjectManager</em>):</p>
<pre><code>ServiceLocator.Default.RegisterType&lt;IProjectReaderService, MyProjectReaderService&gt;();
</code></pre>

<p><strong>Make sure to register the service before instantiating the <em>IProjectManager</em> because it will be injected</strong></p>
<h1 id="creating-a-project-validator">Creating a project validator<a class="headerlink" href="#creating-a-project-validator" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Sometimes it is possible to check on forehand if it's even possible to load a project. This is implemented via the <em>IProjectValidator</em> interface. By default there is no validation, but this can be implemented. For example when a project represents a folder on disk, the validator can check if the directory exists:</p>
<pre><code>public class DirectoryExistsProjectValidator : IProjectValidator
{
    #region IProjectValidator Members
    public async bool CanStartLoadingProject(string location)
    {
        return Directory.Exists(location);
    }
    #endregion
}
</code></pre>

<p>Next it can be registered in the ServiceLocator (so it will automatically be injected into the <em>ProjectManager</em>):</p>
<pre><code>ServiceLocator.Default.RegisterType&lt;IProjectValidator, DirectoryExistsProjectValidator&gt;();
</code></pre>

<h1 id="creating-a-project-reader-service">Creating a project reader service<a class="headerlink" href="#creating-a-project-reader-service" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Projects must be read via the <em>IProjectReaderService</em>. The project manager automatically knows when to read a project. First, one must create a project reader as shown in the example below:</p>
<pre><code>public class ProjectReader : ProjectReaderBase
{
    protected override async Task&lt;IProject&gt; ReadAsync(string location)
    {
        var project = new MyProject(location);

        // TODO: Read from a file / directory / database / anything

        return project;
    }
}
</code></pre>

<p>Next it can be registered in the ServiceLocator (so it will automatically be injected into the <em>ProjectManager</em>):</p>
<pre><code>ServiceLocator.Default.RegisterType&lt;IProjectReaderService, MyProjectReaderService&gt;();
</code></pre>

<h1 id="creating-a-project-writer-service">Creating a project writer service<a class="headerlink" href="#creating-a-project-writer-service" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<pre><code>public class ProjectWriter : ProjectWriterBase&lt;MyProject&gt;
{
    protected override async Task WriteAsync(MyProject project, string location)
    {
        // TODO: Write to a file / directory / database / anything
    }
}
</code></pre>

<p>Next it can be registered in the ServiceLocator (so it will automatically be injected into the <em>ProjectManager</em>):</p>
<pre><code>ServiceLocator.Default.RegisterType&lt;IProjectWriterService, MyProjectWriterService&gt;();
</code></pre>

<h1 id="initializing-the-project-manager">Initializing the project manager<a class="headerlink" href="#initializing-the-project-manager" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>Because the project manager is using async, the initialization is a separate method. This gives the developer the option to load the project whenever it is required. To (optionally) initialize the project manager, use the code below:</p>
<pre><code>await projectManager.Initialize(); 
</code></pre>

<h1 id="retrieving-a-typed-instance-of-the-project">Retrieving a typed instance of the project<a class="headerlink" href="#retrieving-a-typed-instance-of-the-project" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>The library contains extension methods for the <em>IProjectManager</em> to retrieve a typed instance:</p>
<pre><code>var myProject = projectManager.GetProject&lt;MyProject&gt;();
</code></pre>

<h1 id="detecting-project-refreshes-in-the-source">Detecting project refreshes in the source<a class="headerlink" href="#detecting-project-refreshes-in-the-source" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>The library can automatically detect whether the source has changed and the project requires a refresh. It does this using the <em>IProjectRefresher</em> interface.</p>
<h2 id="creating-a-project-refresher-selector">Creating a project refresher selector<a class="headerlink" href="#creating-a-project-refresher-selector" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code>public class ProjectRefresherSelector : IProjectSelector
{
    public IProjectRefresher GetProjectRefresher(string location)
    {
        // TODO: Determine what refresher to use, in this case a file refresher
        return new FileProjectRefresher(location);
    }
} 
</code></pre>

<p>Next it can be registered in the ServiceLocator (so it will automatically be injected into the <em>ProjectManager</em>):</p>
<pre><code>ServiceLocator.Default.RegisterType&lt;IProjectWriterService, MyProjectWriterService&gt;();
</code></pre>

<p><strong>Note that you can also use the DefaultProjectRefresherSelector, which will return the IProjectRefresher that is registered in the ServiceLocator</strong></p>
<h2 id="creating-a-project-refresher">Creating a project refresher<a class="headerlink" href="#creating-a-project-refresher" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The library providers a few default implementations:</p>
<ul>
<li>DirectoryProjectRefresher</li>
<li>FileProjectRefresher</li>
</ul>
<p>If your projects are a file or a directory of files, it should be sufficient to register it in the service locator:</p>
<pre><code>ServiceLocator.Default.RegisterType&lt;IProjectRefresher, FileProjectRefresher&gt;();
</code></pre>

<p>If a custom refresher is required, simply implement it as show in the example below:</p>
<pre><code>public class DirectoryProjectRefresher : ProjectRefresherBase
{
    private static readonly ILog Log = LogManager.GetCurrentClassLogger();

    public DirectoryProjectRefresher(string location) 
        : base(location)
    {
    }

    protected override void SubscribeToLocation(string location)
    {
        // TODO: subscribe to changes here
    }

    protected override void UnsubscribeFromLocation(string location)
    {
        // TODO: unsubscribe from changes here
    }
}
</code></pre>

<p>Then register it in the ServiceLocator or return it in the custom <em>ProjectRefresherSelector</em>.</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>
					    Is this section not up-to-date or found an issue? Please <a href="https://github.com/wildgums/wildgums.opensource/blob/master/src/orc.projectmanagement/introduction.md" target="_blank">contribute</a>!
					  </p>
					  <p>
					    Have a question about WildGums projects? Use <a href="https://stackoverflow.com/questions/tagged/catel" target="_blank">StackOverflow</a> with the <i>Catel</i> tag!
					  </p>
					  <hr />
					  <p>
					    <h2>Discussion</h2>
					   <div id="disqus_thread"></div>
					   <script>
					   var disqus_config = function () {
					   this.page.url = 'http://opensource.wildgums.com/orc-projectmanagement/introduction/index.htm';
					   this.page.identifier = 'src/orc.projectmanagement/introduction.md';
					   };
					   (function() { // DON'T EDIT BELOW THIS LINE
					   var d = document, s = d.createElement('script');
					   s.src = 'https://wildgums-opensource.disqus.com/embed.js';
					   s.setAttribute('data-timestamp', +new Date());
					   (d.head || d.body).appendChild(s);
					   })();
					   </script>
					   <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
					  </p>
					</div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../../js/jquery-2.1.1.min.js"></script>
    <script src="../../js/modernizr-2.8.3.min.js"></script>
    <script src="../../js/highlight.pack.js"></script>
    <script src="../../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-54671533-18', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
