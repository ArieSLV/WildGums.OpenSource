<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Orc.CsvHelper - WildGums open source center</title>
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../css/styles/vs.css">
    <link rel="stylesheet" href="../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="../index.htm"><i class="fa fa-home"></i> WildGums open source center</a>
                <div role="search">
                    <form id="search-form" class="form" action="../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../index.htm">Home</a>
</li>

<li class="tocentry"><a href="../orchestra/index.htm">Orchestra</a>
</li>
<li class="tocentry current"><a class="current" href="../orc.csvhelper/index.htm">Orc.CsvHelper</a>
<ul class="currentrelativeroot">
<li class="tocentry"><a href="#features">Features</a></li>
<li class="tocentry"><a href="#converters">Converters</a></li>
</ul>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../index.htm">WildGums open source center</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../index.htm">Home</a></li> / <li><a href="../orc.csvhelper/index.htm">Orc.CsvHelper</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="orc.csvhelper">Orc.CsvHelper<a class="headerlink" href="#orc.csvhelper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<table class="table table-bordered-all table-responsive">
<tbody>
<tr>
	<td>Chat</td>
	<td><a href="https://gitter.im/WildGums/Orc.CsvHelper?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/WildGums/Orc.CsvHelper" /></a></td>
</tr>
<tr>
	<td>Downloads</td>
	<td><img src="https://img.shields.io/nuget/dt/orc.csvhelper.svg" alt="NuGet downloads" /></td>
</tr>
<tr>
	<td>Stable version</td>
	<td><img src="https://img.shields.io/nuget/v/orc.csvhelper.svg" alt="Version" /></td>
</tr>
<tr>
	<td>Unstable version</td>
	<td><img src="https://img.shields.io/nuget/vpre/orc.csvhelper.svg" alt="Pre-release version" /></td>
</tr>
</tbody>
</table>
<p>Small library of extensions and helper methods for the <a href="http://joshclose.github.io/CsvHelper" target="_blank">CsvHelper</a> library.</p>
<ul>
<li>Static methods are provided to read or write to a csv file with one line of code.</li>
<li>Sensible configuration options are provided out of the box (but can be overwritten if needed).</li>
<li>Reading from a csv file will not lock it.</li>
<li>Capture a meaningful error message when an exception is thrown while reading a csv file. </li>
</ul>
<h2 id="features">Features<a class="headerlink" href="#features" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li><strong>Code generation</strong> =&gt; Use static class <em>CodeGeneration</em> for generating C# POCO classes and their associated maps.</li>
</ul>
<pre><code class="C">#
    /// &lt;summary&gt;
    /// Create CSharp files to consume CSV files.
    /// A standard POCO cs file as well as the CsvHelper Mapping cs file will be created.
    /// All properties in the POCO will be of type string. So please update accordingly.
    /// &lt;/summary&gt;
    public static class CodeGeneration
    {
        public static void CreateCSharpFilesForAllCsvFiles(string inputFoler, string namespaceName, string outputFolder)
        {
            var csvFiles = GetCsvFiles(inputFoler);

            foreach (var csvFile in csvFiles)
            {
                CreateCSharpFiles(csvFile, namespaceName, outputFolder);
            }
        }
        ...
    }
</code></pre>

<ul>
<li><strong>CsvReader helper</strong> =&gt; Use static class <em>CsvReaderHelper</em> for reading csv files with a single line of code.</li>
</ul>
<pre><code class="C">#
public static IEnumerable&lt;T&gt; ReadCsv&lt;T&gt;(string csvFilePath, Action&lt;T&gt; initializer = null, Type mapType = null, CsvConfiguration csvConfiguration = null, bool throwOnError = false)

or

public static IEnumerable&lt;T&gt; ReadCsv&lt;T&gt;(string csvFilePath, CsvClassMap map, Action&lt;T&gt; initializer = null, CsvConfiguration csvConfiguration = null, bool throwOnError = false)
</code></pre>

<p>Example:</p>
<pre><code class="C">#
var records = CsvWriterHelper.ReadCsv&lt;MyClass&gt;(scvFilePath, MyClassMap);
</code></pre>

<ul>
<li><strong>CsvWriter helper</strong> =&gt; Use static class <em>CsvWriterHelper</em> for writing records into a csv file.</li>
</ul>
<pre><code class="C">#
public static void WriteCsv&lt;TRecord, TMap&gt;(IEnumerable&lt;TRecord&gt; records, string csvFilePath, CsvConfiguration csvConfiguration = null, bool throwOnError = false)
</code></pre>

<ul>
<li><strong>CsvExtensions</strong> =&gt; for writing object collections into a csv file using the <em>ToCsv()</em> method.</li>
</ul>
<pre><code class="C">#
public static void ToCsv&lt;TRecord&gt;(this IEnumerable&lt;TRecord&gt; records, string csvFilePath, Type csvMap = null, CsvConfiguration csvConfiguration = null, bool throwOnError = false)
</code></pre>

<p>Example:</p>
<pre><code class="C">#
records.ToCsv&lt;MyClass&gt;(csvFilePath, typeof(MyClassMap));
</code></pre>

<h2 id="converters">Converters<a class="headerlink" href="#converters" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li><strong>EnumConverter</strong> - generic string to enum converter</li>
<li><strong>StringToNullableDateTimeConverter</strong> - converts string to DateTime? type</li>
<li><strong>YesNoToBooleanConverter</strong> - converts &quot;yes&quot; and &quot;no&quot; strings to true and false values correspondingly</li>
<li><strong>TypeConverter</strong> - generic type converter which in some cases is more fluent than the default one.</li>
</ul>
<pre><code class="C">#
public class EmployeeMap : CsvClassMap&lt;Employee&gt;
{
    public EmployeeMap()
    {
        Map(x =&gt; x.Name).Name(&quot;Name&quot;);
        Map(x =&gt; x.StartDate).Name(&quot;StartDate&quot;);

        // Parse the enum. Use EmployeeRate.PerHour on failure.
        Map(x =&gt; x.Rate).Name(&quot;Rate&quot;)
            .TypeConverter(new EnumConverter&lt;EmployeeRate&gt;(EmployeeRate.PerHour));

        // Parse nullable DateTime value
        Map(x =&gt; x.DischargeDate).Name(&quot;DischargeDate&quot;);
            .TypeConverter(new NullableDateTimeConverter());

        // Parse Yes and No string values as booleans
        Map(x =&gt; x.Married).Name(&quot;Married&quot;);
            .TypeConverter(new YesNoToBooleanConverter());

        Map(x =&gt; x.WorkDayDuration).Name(&quot;WorkDayDuration&quot;)
            .TypeConverter(new TypeConverter&lt;TimeSpan&gt;((hours) =&gt; return new TimeSpan(Convert.ToDouble(hours), 0, 0)));
    }
}

</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../js/jquery-2.1.1.min.js"></script>
    <script src="../js/modernizr-2.8.3.min.js"></script>
    <script src="../js/highlight.pack.js"></script>
    <script src="../js/theme.js"></script>

</body>
</html>
