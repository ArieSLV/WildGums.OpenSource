<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Introduction - WildGums open source center</title>
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../css/theme.css" type="text/css" />
    <link rel="stylesheet" href="../css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="../css/styles/vs.css">
    <link rel="stylesheet" href="../css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="/index.htm"><i class="fa fa-home"></i> WildGums open source center</a>
                <div role="search">
                    <form id="search-form" class="form" action="../Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="../Home.htm">Home</a>
</li>
<li class="tocentry"><a href="../introduction.htm">Introduction</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../Orchestra.htm">Orchestra</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcAnalytics.htm">Orc.Analytics</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcAutomaticSupport.htm">Orc.AutomaticSupport</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcCommandLine.htm">Orc.CommandLine</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcControls.htm">Orc.Controls</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcCsvHelper.htm">Orc.CsvHelper</a></span>
</li>
<li class="tocentry">
<ul>
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="../OrcDependencyGraph.htm">Orc.DependencyGraph</a></span></li>
<li class="tocentry current"><a class="current" href="../orc.dependencygraph/introduction.htm">Introduction</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#introduction">Introduction</a></li>
<li class="tocentry"><a href="#naming-convention">Naming Convention</a></li>
<li class="tocentry"><a href="#interface">Interface</a></li>
<li class="tocentry"><a href="#algorithms-time-complexity">Algorithms, Time Complexity</a></li>
<li class="tocentry"><a href="#example">Example</a></li>
<li class="tocentry"><a href="#things-to-think-about">Things To Think About</a></li>
<li class="tocentry"><a href="#pois">POIs</a></li>
<li class="tocentry"><a href="#links">Links</a></li>
</ul>

</ul>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcDynamicObjects.htm">Orc.DynamicObjects</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcEntityFramework.htm">Orc.EntityFramework</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcExtensibility.htm">Orc.Extensibility</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcFeedback.htm">Orc.Feedback</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcFileAssociation.htm">Orc.FileAssociation</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcFileSystem.htm">Orc.FileSystem</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcFilterBuilder.htm">Orc.FilterBuilder</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcFluentValidation.htm">Orc.FluentValidation</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcLicenseManager.htm">Orc.LicenseManager</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcLogViewer.htm">Orc.LogViewer</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcMemento.htm">Orc.Memento</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcMetadata.htm">Orc.Metadata</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcNotifications.htm">Orc.Notifications</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcNuGetExplorer.htm">Orc.NuGetExplorer</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcPrism.htm">Orc.Prism</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcProjectManagement.htm">Orc.ProjectManagement</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcScheduling.htm">Orc.Scheduling</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcSearch.htm">Orc.Search</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcSkia.htm">Orc.Skia</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcSnapshots.htm">Orc.Snapshots</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcSort.htm">Orc.Sort</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcSquirrel.htm">Orc.Squirrel</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcSupportPackage.htm">Orc.SupportPackage</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcSystemInfo.htm">Orc.SystemInfo</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcWizard.htm">Orc.Wizard</a></span>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="../OrcWorkspaceManagement.htm">Orc.WorkspaceManagement</a></span>
</li>

</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="../index.htm">WildGums open source center</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="../Home.htm">Home</a></li> / <li><a href="../OrcDependencyGraph.htm">Orc.DependencyGraph</a></li> / <li><a href="../orc.dependencygraph/introduction.htm">Introduction</a></li></ul>

                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="orc.dependencygraph">Orc.DependencyGraph<a class="headerlink" href="#orc.dependencygraph" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<table class="table table-bordered-all table-responsive">
<tbody>
<tr>
	<td>Chat</td>
	<td><a href="https://gitter.im/WildGums/Orc.DependencyGraph?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/WildGums/Orc.DependencyGraph" /></a></td>
</tr>
<tr>
	<td>Downloads</td>
	<td><img src="https://img.shields.io/nuget/dt/orc.dependencygraph.svg" alt="NuGet downloads" /></td>
</tr>
<tr>
	<td>Stable version</td>
	<td><img src="https://img.shields.io/nuget/v/orc.dependencygraph.svg" alt="Version" /></td>
</tr>
<tr>
	<td>Unstable version</td>
	<td><img src="https://img.shields.io/nuget/vpre/orc.dependencygraph.svg" alt="Pre-release version" /></td>
</tr>
</tbody>
</table>
<h2 id="introduction">Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>This library will help <strong>navigate</strong> a directed acyclic graph (DAG).</p>
<p>The goal of this library is to make it easy to:</p>
<ul>
<li>Find a specific node within a graph.</li>
<li>Find all nodes on a certain level of the graph.</li>
<li>Find all nodes between two levels of the graph.</li>
<li>Find all nodes related to a given node. (i.e. find its decedents and/or its precedents on any level of the graph.)</li>
<li>Sort the nodes in topological order</li>
</ul>
<h2 id="naming-convention">Naming Convention<a class="headerlink" href="#naming-convention" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li>Descendants. i.e. What descends from or comes after: Child</li>
<li>Precedents. i.e What precedes, or comes before: Parent</li>
<li>Level. We consider level as topological level of the node. I.e. Level 1 consists of nodes whose Precedents are of Level 0. In general level is the longest path from the node to the root of the graph.</li>
</ul>
<h2 id="interface">Interface<a class="headerlink" href="#interface" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<h3 id="graph">Graph<a class="headerlink" href="#graph" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code>public interface IGraph&lt;T&gt;
    where T : IEquatable&lt;T&gt;
{
    INode&lt;T&gt; Find(T value); 

    void AddSequence(IEnumerable&lt;T&gt; sequence);
    void AddSequences(IEnumerable&lt;IEnumerable&lt;T&gt;&gt; sequences);

    IEnumerable&lt;INode&lt;T&gt;&gt; Nodes { get; }

    bool CanSort();
    bool CanSort(IEnumerable&lt;T&gt; sequence);

    int CountNodes { get; }
    int CountLevels { get; }
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; GetNodes(int level);
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; GetNodesBetween(int levelFrom, int levelTo);
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; Sort();
}
</code></pre>

<p><strong>Note:</strong></p>
<ul>
<li><code>AddSequence(IEnumerable&lt;T&gt; sequence)</code>: the sequence must contain at least 2 items. The relationship between the items is automatically assumed as item1 -&gt; item2 -&gt; item3 etc...</li>
</ul>
<h3 id="node">Node<a class="headerlink" href="#node" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code>public interface INode&lt;T&gt;
    where T: IEquatable&lt;T&gt;
{
    T Value { get; }
    IGraph&lt;T&gt; Graph { get; }
    int Level { get; }

    // relativeLevel &gt;= relativeLevelFrom &amp;&amp; relativeLevel &lt;= relativeLevelTo
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; GetNeighbours(int relativeLevelFrom, int relativeLevelTo);
    // relativeLevel &lt; 0
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; Precedents { get; }
    // relativeLevel &gt; 0
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; Descendants { get; }
    // relativeLevel == relativeLevel - 1
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; ImmediatePrecedents { get; }
    // relativeLevel == relativeLevel + 1
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; ImmediateDescendants { get; }
    // Precedents of the node without precedents (roots)
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; TerminatingPrecedents { get; }
    // Descendants of the node without descendants (leafs)
    IOrderedEnumerable&lt;INode&lt;T&gt;&gt; TerminatingDescendants { get; }
}
</code></pre>

<p><strong>Note:</strong>
- All the methods return an ordered enumerable of INode. The ordering is based on the &quot;level&quot; of the node. (Within a level the ordering is not important.)
- If possible the methods returns all the INodes lazily.
- A Node object has a reference to the Graph object.</p>
<h2 id="algorithms-time-complexity">Algorithms, Time Complexity<a class="headerlink" href="#algorithms-time-complexity" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The Dependency Graph is a <strong>static</strong> data structure. All the nodes and their relationships should be known ahead of time.</p>
<table class="table table-bordered-all table-responsive">
<thead>
<tr>
	<th>Method Names</th>
	<th>Algorithms</th>
	<th>Time Complexity</th>
</tr>
</thead>
<tbody>
<tr>
	<td>AddSequence()</td>
	<td>-</td>
	<td>O(1)</td>
</tr>
<tr>
	<td>AddSequences()</td>
	<td>-</td>
	<td>O(1)</td>
</tr>
<tr>
	<td>Sort()</td>
	<td><a href="http://en.wikipedia.org/wiki/Topological_sorting" target="_blank">Topological Sort</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>CanSort()</td>
	<td><a href="http://en.wikipedia.org/wiki/Topological_sorting" target="_blank">Topological Sort</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>ComputeLevels()</td>
	<td><a href="http://en.wikipedia.org/wiki/Critical_path_method" target="_blank">Critical Path</a>, <a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(E+V)</td>
</tr>
<tr>
	<td>CountNodes()</td>
	<td>-</td>
	<td>O(1)</td>
</tr>
<tr>
	<td>CountLevels()</td>
	<td>-</td>
	<td>O(1)</td>
</tr>
<tr>
	<td>GetNodesWithLevel()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>GetNodesWithLevelBetween()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>Precedents()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>Descendants()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>ImmediatePrecedents()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>ImmediateDescendants()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>TerminatingPrecedents()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
<tr>
	<td>TerminatingDescendants()</td>
	<td><a href="http://en.wikipedia.org/wiki/Depth-first_search" target="_blank">DFS</a></td>
	<td>O(V+E)</td>
</tr>
</tbody>
</table>
<h5 id="computelevels-private-method">ComputeLevels private method<a class="headerlink" href="#computelevels-private-method" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h5>
<p>ComputeLevels method performs initial pre-calculation (e.g. pre-calculate levels for nodes)
Graph will be rebuild automatically on first call of any method related to node levels after a graph structure change.</p>
<ol>
<li>Find the longest path. 
Critical path method O(V+E)</li>
<li>DFS from the source of the longest path, decrementing the level value for every child	DFS - O(V+E)</li>
</ol>
<h2 id="example">Example<a class="headerlink" href="#example" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p><img src="../images/orc.dependencygraph/introduction/dependencygraph.png" alt="Dependency Graph" width="1600" height="1025" /></p>
<h5 id="note">NOTE:<a class="headerlink" href="#note" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h5>
<ul>
<li>The root nodes are 11 and 12.</li>
<li>The leaf nodes are 61 and 62</li>
<li>This graph has 6 levels.</li>
<li>The root nodes have a level value equal to 0</li>
</ul>
<h3 id="create-graph-structure">Create Graph Structure<a class="headerlink" href="#create-graph-structure" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code>new Graph(new []
{
    new[] {11, 27, 32},
    new[] {12, 27},
    // etc....
});
</code></pre>

<p>Or</p>
<pre><code>var graph = new Graph();
graph.AddRange(new []
{
    new[] {11, 27, 32},
    new[] {12, 27},
    // etc....
});
</code></pre>

<h3 id="interaction">Interaction<a class="headerlink" href="#interaction" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<pre><code>[Test]
public void BasicOperationsTest()
{
    var graph = CreateExampleGraph();

    Assert.IsTrue(graph.CanSort());

    Assert.AreEqual(20, graph.Count);

    Assert.IsTrue(graph.CanSort());

    Assert.AreEqual(6, graph.CountLevels);

    AssertCollectionsConsistsOfNodes(new[] {31}, graph.GetNodes(4));

    AssertCollectionsConsistsOfNodes(new[] {51, 61, 62}, graph.GetNodesBetween(4, 5));

    AssertCollectionsConsistsOfNodes(new[] {11, 12, 25, 26, 27}, graph.Find(32).Precedents);

    AssertCollectionsConsistsOfNodes(new[] {51, 61, 62}, graph.Find(43).Descendants);

    AssertCollectionsConsistsOfNodes(new[] {25, 26, 27}, graph.Find(32).ImmediatePrecedents);

    AssertCollectionsConsistsOfNodes(new[] {51}, graph.Find(43).ImmediateDescendants);

    AssertCollectionsConsistsOfNodes(new[] {11, 12}, graph.Find(32).TerminatingPrecedents);

    AssertCollectionsConsistsOfNodes(new[] {61, 62}, graph.Find(43).TerminatingDescendants);
}
</code></pre>

<h2 id="things-to-think-about">Things To Think About<a class="headerlink" href="#things-to-think-about" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li>
<p>How to return all nodes between two levels that relate to a certain node.</p>
<p>GetNodesRelatedTo(T value, int minLevel == 0, int maxLevel == max)</p>
<p>graph.GetNodesRelatedTo(11, 1, 3) =&gt; new[]{27, 32, 46}
graph.GetNodesRelatedTo(32, 0, 3) =&gt; new[]{11, 12, 25, 26, 27, 32, 46}</p>
</li>
<li>
<p>Node.GetNext()</p>
</li>
<li>Node.GetPrevious()</li>
</ul>
<h2 id="pois">POIs<a class="headerlink" href="#pois" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li>There are some ways how we can improve CanSort(sequence) method:</li>
<li>We can copy graph much faster if we will find relations using temporary array and node.Key.</li>
<li>We can track changes, which were made to graph and UnDo them after the sorting.</li>
</ul>
<h2 id="links">Links<a class="headerlink" href="#links" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<ul>
<li>http://msdn.microsoft.com/en-us/library/ms379574(v=vs.80).aspx</li>
<li>http://en.wikipedia.org/wiki/Critical_path_method</li>
</ul>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">

                      <p>
					    Is this section not up-to-date or found an issue? Please <a href="https://github.com/wildgums/wildgums.opensource/blob/master/src/orc.dependencygraph/introduction.md" target="_blank">contribute</a>!
					  </p>
					  <p>
					    Have a question about WildGums projects? Use <a href="https://stackoverflow.com/questions/tagged/catel" target="_blank">StackOverflow</a> with the <i>Catel</i> tag!
					  </p>
					  <hr />
					  <p>
					    <h2>Discussion</h2>
					   <div id="disqus_thread"></div>
					   <script>
					   var disqus_config = function () {
					   this.page.url = 'http://opensource.wildgums.com/orc.dependencygraph/introduction.htm';
					   this.page.identifier = 'src/orc.dependencygraph/introduction.md';
					   };
					   (function() { // DON'T EDIT BELOW THIS LINE
					   var d = document, s = d.createElement('script');
					   s.src = 'https://wildgums-opensource.disqus.com/embed.js';
					   s.setAttribute('data-timestamp', +new Date());
					   (d.head || d.body).appendChild(s);
					   })();
					   </script>
					   <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
					  </p>
					</div>
                </footer>
            </div>
        </section>
    </div>
    <script src="../js/jquery-2.1.1.min.js"></script>
    <script src="../js/modernizr-2.8.3.min.js"></script>
    <script src="../js/highlight.pack.js"></script>
    <script src="../js/theme.js"></script>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-54671533-18', 'auto');
      ga('send', 'pageview');
    
    </script>
</body>
</html>
